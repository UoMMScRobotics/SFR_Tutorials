Week 09 Continuous Assessment Walkthrough
=========================================

The key deliverable of this week's assessment is to deliver a map, generated by a robot traversing an environment using SLAM.
There are a few steps we must complete in order to get there.

1. Build a ROS package using ament_python
2. Start a simulation of a robot in an environment
3. Start SLAM to begin mapping
4. Drive the robot around
5. Use the map server to save an image and corresponding yaml file

In this guide we will use map_maker_pkg as the package name, but this should be substituted with your ROS package name.


Step 1 - Make a Package
-----------------------------------------
This package can be used both for the submission (which requires a ROS package), but also to hold a luanch file which will make running all this easier.

.. note:: Why bother with a launch file at all - bring on lots of terminal sessions!
    The biggest convenience of the launch file is being able to declare that all the nodes should "use_sim_time", the time provided by the Gazebo simulator rather than the computer's local clock.
    This means that laser scan messages and transformations in time can be performed correctly. If nodes are running on different clocks, things very quickly fall down.


Make a package the usual way:

.. code-block:: console

    cd ~/MY_ROS_WS/src/
    ros2 pkg create map_maker_pkg --build-type ament_python
    cd map_maker_pkg
    mkdir launch
    mkdir maps

Your setup.py file should have some extra lines added to include the launch and map directories:


.. literalinclude:: ../../ros_ws/src/map_maker_pkg/setup.py
   :language: python
   :emphasize-lines: 2,3,15,16
   :linenos:


.. code-block:: console

    cd ~/MY_ROS_WS/
    colcon build
    source install/setup.bash


Step 2 - Start a Simulation
-----------------------------------------

A simulation environment has been provided for you as part of the synchronous tutorial material, namely gz_example_robot_description, 
which includes a launch file sim_robot.launch.py.

If we wanted to use a joystick/gamepad for teleoperation, then here would be a good place to put a additional node to run.  As we will use the teleop_twist_keyboard package, its easier to have this in a separate terminal.

A simple launch file should look something like the file below.

.. .. literalinclude:: ../../ros_ws/src/map_maker_pkg/launch/step1.launch.py
..    :language: python
..    :linenos:
..    :emphasize-lines:

Step 3 - Start SLAM
-----------------------------------------

This once again is trivial.  By simply added an additional launch file, SLAM toolbox can be running to provide Simultaneous Localisation and Mapping (SLAM).
Our launch file should look something like the one below.


Step 4 - Drive the Robot Around
------------------------------------------

If you haven't already inclued a joystick teleop node, then use the keyboard teleop node in a separate terminal.
By manually driving the robot around, we can fill in the map of the environment.  Remember, that slam toolbox utilises pose graph optimisation, therefore, it likes to see loops in the data to perform closure (and provide a better estimate).


Step 5 - Saving the Map
------------------------------------------

We could add this portion to our launch file, but at this stage it would be unnecessary.