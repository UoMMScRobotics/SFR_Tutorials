Week 09
=========================================

The key deliverable of this week's assessment is to deliver a map, generated by a robot traversing an environment using SLAM.
There are a few steps we must complete in order to get there.

1. Build a ROS package using ament_python
2. Start a simulation of a robot in an environment
3. Start SLAM to begin mapping
4. Drive the robot around
5. Use the map server to save an image and corresponding yaml file

In this guide we will use ``map_maker_pkg`` as the package name, but this should be substituted with your ROS package name.


Step 1 - Make a Package
-----------------------------------------
This package can be used both for the submission (which requires a ROS package), but also to hold a luanch file which will make running all this easier.

.. note:: *Why bother with a launch file at all?  Bring on lots of terminal sessions!*
    The biggest convenience of the launch file is being able to declare that all the nodes should ``use_sim_time``, the time provided by the Gazebo simulator rather than the computer's local clock.
    This means that laser scan messages and transformations in time can be performed correctly. If nodes are running on different clocks, things very quickly fall down.


Make a package the usual way:

.. code-block:: console

    cd ~/MY_ROS_WS/src/
    ros2 pkg create map_maker_pkg --build-type ament_python
    cd map_maker_pkg
    mkdir launch
    mkdir maps

Your setup.py file should have some extra lines added to include the launch and map directories:


.. literalinclude:: ../../ros_ws/src/map_maker_pkg/setup.py
   :language: python
   :emphasize-lines: 2,3,15,16
   :linenos:


.. code-block:: console

    cd ~/MY_ROS_WS/
    colcon build
    source install/setup.bash


Step 2 - Start a Simulation
-----------------------------------------

A simulation environment has been provided for you as part of the synchronous tutorial material, namely gz_example_robot_description, 
which includes a launch file sim_robot.launch.py.

If we wanted to use a joystick/gamepad for teleoperation, then here would be a good place to put a additional node to run.  As we will use the teleop_twist_keyboard package, its easier to have this in a separate terminal.

A simple launch file called ``map_maker.launch.py`` should look something like the file below.

.. literalinclude:: ../../ros_ws/src/map_maker_pkg/launch/step1.launch.py
   :language: python
   :linenos:

As a sanity check, ``colon build``, followed by ``source install/setup.bash`` and check the launch file runs correctly using

.. code-block:: console

    ros2 launch map_maker_pkg map_maker.launch.py

You can then ``Ctrl+C`` to stop the simulation and RVIZ.

Step 3 - Start SLAM
-----------------------------------------

This once again is trivial.  By simply adding an additional launch file action to our launch file, SLAM toolbox can be running to provide Simultaneous Localisation and Mapping (SLAM).
Our launch file should look something like the one below.

.. literalinclude:: ../../ros_ws/src/map_maker_pkg/launch/step2.launch.py
   :language: python
   :linenos:
   :emphasize-lines: 18-22,28


As always, ``colcon build``, ``source install/setup.bash`` and check the launch file works correctly.

You probably want to see the map in RVIZ right?
````````````````````````````````````````````````

Include the map via :menuselection: `Add > By topic > /map`.  You then need to adjust the Quality of Service (QoS) settings to match that of the ``/map`` topic.  The easiest way is to open a new terminal and run

.. code-block:: console

    ros2 topic info --verbose /map

where the ``--verbose`` option will list the expected QoS settings.  It is recommended to include things like the laser scan and the robot model to the RVIZ visualisation to get a better sense of what is going on.


Step 4 - Drive the Robot Around
------------------------------------------

If you haven't already inclued a joystick teleop node, then use the keyboard teleop node in a separate terminal using ``ros2 run teleop_twist_keyboard teleop_twist_keyboard``.
By manually driving the robot around, we can fill in the map of the environment.  Remember, that slam toolbox utilises pose graph optimisation, therefore, it likes to see loops in the data to perform closure (and provide a better estimate).


Step 5 - Saving the Map
------------------------------------------

We could add this portion to our launch file, but at this stage it would be unnecessary, instead we will run everything from a new terminal.  Start by launching the map_server map_saver_launch via

.. code-block:: console

    ros2 launch nav2_map_server map_saver_server.launch.py

This will have spawned new ROS services we can call to save our map, namely ``/map_saver/save_map``, of the type ``nav2_msgs/srv/SaveMap``.  There are a few options we need to set during the service call (listed in detail `here <map_server_docs_>`_):

.. _map_server_docs: https://index.ros.org/p/nav2_map_server/

.. list-table:: map server saver options
   :widths: 20 20 56
   :header-rows: 1

   * - Option
     - Value
     - Notes
   * - map_topic
     - map
     - The default topic is usually map
   * - map_url
     - map_name
     - It will also accept a full path, such as /home/username/Documents/map_name
   * - image_format
     - pgm
     - pgm (greyscale image) is the default
   * - map_mode
     - trinary
     - Records three possible states (Unknown, Occupied, Free Space) as three colour/greyscale values
   * - free_thresh
     - 0.25
     - Probabilities equal or below are treated as free space (robot can move through it)
   * - occupied_thresh
     - 0.65
     - Probabilities equal or above are treated as occupied (there is an obstacle)


In yet another new terminal, either use rqt (selecting the service caller plugin and finding the correct service) or the command line to call the service.

.. code-block:: console
    
    ros2 service call /map_saver/save_map nav2_msgs/srv/SaveMap "map_topic: 'map'
    map_url: 'map_name'
    image_format: 'pgm'
    map_mode: 'trinary'
    free_thresh: 0.25
    occupied_thresh: 0.65" 

.. hint::
    Instead of manually typing out the entire message, you can start with ``"`` and use tab-completion to fill in the rest of the message with default values, then simply change the values to desired.

Tada!  If the service request was successful, you should have a map called ``map_name.pgm`` with an associated metadata file ``map_name.yaml``.  Ensure these are held in your package ``maps`` directory for submission.

.. image:: ../../ros_ws/src/map_maker_pkg/maps/map_name.pgm.png
  :width: 400
  :alt: Generated ROS Map